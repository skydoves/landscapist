{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>\ud83c\udf3b Landscapist is a highly optimized, pluggable Jetpack Compose image loading solution, offering seamless network image fetching and display capabilities using Glide, Coil, and Fresco. </p> <p>This library supports tracing image loading states, enabling you to compose custom implementations with ease. It also provides a range of valuable animations, including crossfades, blur transformations, and circular reveals, enhancing the visual appeal of your images. </p> <p>Additionally, Landscapist offers the flexibility to configure and attach image-loading behaviors effortlessly using image plugins, allowing for swift and efficient customization. </p>"},{"location":"#why-landscapist","title":"Why Landscapist?","text":"<p>Landscapist is a thoughtfully designed solution, meticulously crafted to optimize image loading performance in Jetpack Compose. The majority of its composable functions are marked as Restartable and Skippable, signifying significant improvements in recomposition performance, as measured by the Compose compiler metrics. Additionally, the library's performance has been enhanced further through the implementation of Baseline Profiles.</p> <p>Landscapist offers extensive support for pluggable features, making it a highly flexible and versatile library. Some of its remarkable capabilities include ImageOptions,  listening image state changes, and the ability to create custom composables. It even offers seamless integration with Android Studio for previewing, making development more efficient.</p> <p>Furthermore, Landscapist provides various features such as ImageComponent and ImagePlugin, placeholder, animations (circular reveal, crossfade), transformation (blur), and palette support. With such a rich set of functionalities, Landscapist offers an unparalleled experience in image handling within Jetpack Compose.</p> <p>See the Compose compiler metrics for Landscapist</p> <p></p> <p>Additionally, Landscapist has been featured on the Google Play SDK Console after meeting the following criteria: it is used by 100+ apps and has accumulated over 100 million app installs, according to Google Play\u2019s data.</p> <p>All issues raised by this library can be reported securely and safely. Impressively, Landscapist has reported zero crashes over the past year.</p> <p>See the Google Play SDK Console Crash Reports for Landscapist</p> <p></p>"},{"location":"#whos-using-landscapist","title":"Who's using Landscapist?","text":"<p>Landscapist is experiencing incredible success, with over +700,000 downloads every month from users worldwide! \ud83d\ude80 </p> <p>This impressive global reach reflects the trust and popularity of Landscapist among developers and demonstrates its significant impact on the Jetpack Compose image loading ecosystem.</p> <p></p> <p>Especially, the global products below are using Landscapist.</p> Product Logo License X for Android License Azar for Android License KakaoBank License Hakuna: Live Streams and Chat License MISTPLAY: Play to earn rewards License Faire for Android License Stream Chat &amp; Video SDKs for Android License"},{"location":"animation/","title":"Animation","text":"<p>The landscapist-animation package offers a set of valuable image plugins related to animations, including crossfade and circular reveal animations. </p> <p>To utilize these animation supports, simply add the following dependency:</p> <p></p> GroovyKTS <pre><code>dependencies {\n    implementation \"com.github.skydoves:landscapist-animation:$version\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"com.github.skydoves:landscapist-animation:$version\")\n}\n</code></pre>"},{"location":"animation/#crossfade-animation","title":"Crossfade Animation","text":"<p>You can effortlessly implement the crossfade animation while displaying images using the CrossfadePlugin, as shown in the example below:</p> GlideCoilFresco <pre><code>GlideImage(\n  component = rememberImageComponent {\n      +CrossfadePlugin(\n        duration = 550\n      )\n  },\n  ..\n)\n</code></pre> <pre><code>CoilImage(\n  component = rememberImageComponent {\n      +CrossfadePlugin(\n        duration = 550\n      )\n  },\n  ..\n)\n</code></pre> <pre><code>FrescoImage(\n  component = rememberImageComponent {\n      +CrossfadePlugin(\n        duration = 550\n      )\n  },\n  ..\n)\n</code></pre> <p>By using the <code>CrossfadePlugin</code>, you can achieve smooth and visually pleasing image transitions that gracefully fade from one image to another. This animation effect adds a touch of elegance to your app and enhances the overall user experience while displaying images.</p>"},{"location":"animation/#circular-reveal-animation","title":"Circular Reveal Animation","text":"<p>You can seamlessly implement the circular reveal animation while displaying images using the <code>CircularRevealPlugin</code>, as demonstrated below:</p> GlideCoilFresco <pre><code>GlideImage(\n  component = rememberImageComponent {\n      +CircularRevealPlugin(\n        duration = 350\n      )\n  },\n  ..\n)\n</code></pre> <pre><code>CoilImage(\n  component = rememberImageComponent {\n      +CircularRevealPlugin(\n        duration = 350\n      )\n  },\n  ..\n)\n</code></pre> <pre><code>FrescoImage(\n  component = rememberImageComponent {\n      +CircularRevealPlugin(\n        duration = 350\n      )\n  },\n)\n</code></pre> <p>The <code>CircularRevealPlugin</code> allows you to create captivating image transitions that emanate from a circular shape, adding a visually engaging effect to your app. This animation enhances the user experience and provides a delightful way to showcase images within your application.</p>"},{"location":"animation/#preview","title":"Preview","text":"Circular Reveal Crossfade"},{"location":"bom/","title":"BOM","text":"<p>The Landscapist Bill of Materials (BOM) simplifies the management of all Landscapist library versions. By specifying only the BOM's version, you can effortlessly manage the versions of all Landscapist libraries used in your project.</p> <p></p> GroovyKTS <pre><code>dependencies {\n    // Import the landscapist BOM\n    implementation \"com.github.skydoves:landscapist-bom:$version\"\n\n    // Import landscapist libraries\n    implementation \"com.github.skydoves:landscapist-glide\"\n    implementation \"com.github.skydoves:landscapist-coil\"\n    implementation \"com.github.skydoves:landscapist-fresco\"\n\n    implementation \"com.github.skydoves:landscapist-animation\"\n    implementation \"com.github.skydoves:landscapist-placeholder\"\n    implementation \"com.github.skydoves:landscapist-palette\"\n    implementation \"com.github.skydoves:landscapist-transformation\"\n}\n</code></pre> <pre><code>dependencies {\n    // Import the landscapist BOM\n    implementation(\"com.github.skydoves:landscapist-bom:$version\")\n\n    // Import landscapist libraries\n    implementation(\"com.github.skydoves:landscapist-glide\")\n    implementation(\"com.github.skydoves:landscapist-coil\")\n    implementation(\"com.github.skydoves:landscapist-fresco\")\n\n    implementation(\"com.github.skydoves:landscapist-animation\")\n    implementation(\"com.github.skydoves:landscapist-placeholder\")\n    implementation(\"com.github.skydoves:landscapist-palette\")\n    implementation(\"com.github.skydoves:landscapist-transformation\")\n}\n</code></pre> <p>This ensures a streamlined and efficient development process, as you can easily keep track of library versions and ensure compatibility across your Landscapist dependencies. </p>"},{"location":"coil3/","title":"Coil3 (KMP)","text":"Landscapist Coil3 <p>Add the dependency below to your module's <code>build.gradle</code> file:</p> GroovyKTS <pre><code>dependencies {\n    implementation \"com.github.skydoves:landscapist-coil3:$version\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"com.github.skydoves:landscapist-coil3:$version\")\n}\n</code></pre> <p>If you're targeting on Kotlin Multiplatform, add the dependency below to your module's <code>build.gradle.kts</code> file:</p> <pre><code>sourceSets {\n    val commonMain by getting {\n        dependencies {\n            implementation(\"com.github.skydoves:landscapist-coil3:$version\")\n        }\n    }\n}\n</code></pre> <p>The <code>coil3-landscapist</code> package functions identically to the <code>coil-landscapist</code> package, with the key distinction being its focus on Kotlin Multiplatform. This enables the use of Coil3 across various platforms, including Android, iOS, and Desktop (JVM), facilitating a unified image loading experience across different environments.</p> <p>Note</p> <p>Please make sure your project uses the same Jetpack Compose version on the release page.</p>"},{"location":"coil3/#coilimage","title":"CoilImage","text":"<p>You can load images by using the <code>CoilImage</code> composable function as the following example below:</p> <pre><code>CoilImage(\n  imageModel = { imageUrl }, // loading a network image or local resource using an URL.\n  imageOptions = ImageOptions(\n    contentScale = ContentScale.Crop,\n    alignment = Alignment.Center\n  )\n)\n</code></pre>"},{"location":"coil3/#compose-metrics","title":"Compose Metrics","text":"<p>According to the Compose Compiler Metrics, the <code>CoilImage</code> Composable function is marked as Restartable and Skippable. This means you don't have to worry about performance issues related to re-rendering or re-fetching problems that can occur during recomposition. The Composable function's restartable and skippable nature ensures that the necessary actions are taken to optimize rendering, making it more efficient and seamless.</p> <p></p>"},{"location":"custom-composable/","title":"Custom Composable","text":"<p>Landscapist offers a powerful way to load images using your custom Composable functions. This capability allows you to tailor your own loading placeholders, success images, or fallbacks for handling loading failures. With such flexibility, you can create a personalized and seamless image loading experience tailored to your specific app's needs.</p>"},{"location":"custom-composable/#build-your-own-composable","title":"Build Your Own Composable","text":"<p>You can execute your own composable functions based on the three image states below:</p> <ul> <li>loading: Executes while the image is being loaded.</li> <li>success: Executes upon successful image loading.</li> <li>failure: Executes when there is a failure to load the image (e.g., network error, incorrect destination).</li> </ul> GlideCoilFresco <pre><code>GlideImage(\n  // displays an indicator while loading an image.\n  loading = {\n    Box(modifier = Modifier.matchParentSize()) {\n      CircularProgressIndicator(\n        modifier = Modifier.align(Alignment.Center)\n     ) \n    }\n  },\n  // displays an error fallback if fails to load an image.\n  failure = {\n    Text(text = \"image request failed.\")\n },\n  ..\n)\n</code></pre> <pre><code>CoilImage(\n  // displays an indicator while loading an image.\n  loading = {\n    Box(modifier = Modifier.matchParentSize()) {\n      CircularProgressIndicator(\n        modifier = Modifier.align(Alignment.Center)\n     ) \n    }\n  },\n  // displays an error fallback if fails to load an image.\n  failure = {\n    Text(text = \"image request failed.\")\n },\n  ..\n)\n</code></pre> <pre><code>FrescoImage(\n  // displays an indicator while loading an image.\n  loading = {\n    Box(modifier = Modifier.matchParentSize()) {\n      CircularProgressIndicator(\n        modifier = Modifier.align(Alignment.Center)\n     ) \n    }\n  },\n  // displays an error fallback if fails to load an image.\n  failure = {\n    Text(text = \"image request failed.\")\n },\n  ..\n)\n</code></pre> <p>With the above custom loading composable sample, you'll see the result below:</p> <p></p>"},{"location":"custom-composable/#render-your-own-image-composable","title":"Render Your Own Image Composable","text":"<p>You can also render your own Composable function with the success image state.</p> GlideCoilFresco <pre><code>GlideImage(\n  success = { imageState -&gt;\n    imageState.imageBitmap?.let {\n      Image(\n        bitmap = it,\n        modifier = Modifier.size(128.dp) // draw a resized image.\n      )\n    }\n  },\n  ..\n)\n</code></pre> <pre><code>CoilImage(\n  success = { imageState -&gt;\n    imageState.imageBitmap?.let {\n      Image(\n        bitmap = it,\n        modifier = Modifier.size(128.dp) // draw a resized image.\n      )\n    }\n  },\n  ..\n)\n</code></pre> <pre><code>FrescoImage(\n  success = { imageState -&gt;\n    imageState.imageBitmap?.let {\n      Image(\n        bitmap = it,\n        modifier = Modifier.size(128.dp) // draw a resized image.\n      )\n    }\n  },\n  ..\n)\n</code></pre> <p>As you can see in the above example, you're able to render your image composable inside the <code>success</code> lambda parameter, which provides the image state and painter.</p>"},{"location":"image-component-and-plugin/","title":"ImageComponent and ImagePlugin","text":"<p>One of the most versatile fatures of Landscapist is the <code>ImageComponent</code> and <code>ImagePlugin</code>:</p> <ul> <li>ImageComponent: The <code>ImageComponent</code> is a flexible interface that acts as a container for a collection of <code>ImagePlugins</code>.</li> <li>ImagePlugin: The <code>ImagePlugin</code> is an executable and pluggable Compose interface, triggered based on specific image states.</li> </ul> <p>With Landscapist, you have the flexibility to compose supported image plugins, or you can even implement your own custom image plugin that will be executed based on the image loading state. This powerful feature empowers you to tailor the image loading behavior according to your specific needs and preferences.</p> <ul> <li>PainterPlugin: A pinter plugin interface to be composed with the given <code>Painter</code>.</li> <li>LoadingStatePlugin: A pluggable state plugin that will be composed while the state is <code>ImageLoadState.Loading</code>.</li> <li>SuccessStatePlugin: A pluggable state plugin that will be composed when the state is <code>ImageLoadState.Success</code>.</li> <li>FailureStatePlugin: A pluggable state plugin that will be composed when the state is <code>ImageLoadState.Failure</code>.</li> </ul> <p>Whether you choose from the existing plugins or create your own, Landscapist offers a seamless and customizable image loading experience for your app.</p> <p>As an example, you can implement your own LoadingStatePlugin that will be composed specifically while loading an image, as demonstrated below:</p> <pre><code>data class LoadingPlugin(val source: Any?) : ImagePlugin.LoadingStatePlugin {\n\n  // this composable function will be executed while loading an image.\n  @Composable\n  override fun compose(\n    modifier: Modifier,\n    imageOptions: ImageOptions,\n    executor: @Composable (IntSize) -&gt; Unit,\n  ): ImagePlugin = apply {\n    if (source != null &amp;&amp; imageOptions != null) {\n      ImageBySource(\n        source = source,\n        modifier = modifier,\n        alignment = imageOptions.alignment,\n        contentDescription = imageOptions.contentDescription,\n        contentScale = imageOptions.contentScale,\n        colorFilter = imageOptions.colorFilter,\n        alpha = imageOptions.alpha\n      )\n    }\n  }\n}\n</code></pre> <p>By creating a custom <code>LoadingStatePlugin</code>, you can define unique behavior tailored to the loading state of the image. This gives you the freedom to handle loading scenarios in a way that best suits your application's requirements.</p> <p>Now you can add your own image plugin into the image component like so:</p> GlideCoilFresco <pre><code>GlideImage(\n    component = rememberImageComponent {\n        add(CircularRevealPlugin())\n        add(LoadingPlugin(source))\n    },\n    ..\n)\n</code></pre> <pre><code>CoilImage(\n    component = rememberImageComponent {\n        add(CircularRevealPlugin())\n        add(LoadingPlugin(source))\n    },\n    ..\n)\n</code></pre> <pre><code>FrescoImage(\n    component = rememberImageComponent {\n        add(CircularRevealPlugin())\n        add(LoadingPlugin(source))\n    },\n    ..\n)\n</code></pre> <p>or you can just add plugins by using the + expression like the below:</p> GlideCoilFresco <pre><code>GlideImage(\n    component = rememberImageComponent {\n        +CircularRevealPlugin()\n        +LoadingPlugin(source)\n    },\n    ..\n)\n</code></pre> <pre><code>CoilImage(\n    component = rememberImageComponent {\n        +CircularRevealPlugin()\n        +LoadingPlugin(source)\n    },\n    ..\n)\n</code></pre> <pre><code>FrescoImage(\n    component = rememberImageComponent {\n        +CircularRevealPlugin()\n        +LoadingPlugin(source)\n    },\n    ..\n)\n</code></pre>"},{"location":"image-component-and-plugin/#localimagecomponent","title":"LocalImageComponent","text":"<p>You can easily share the same <code>ImageComponent</code> instance throughout your composable hierarchy by utilizing the <code>imageComponent</code> extension and <code>LocalImageComponent</code>, as demonstrated below:</p> <pre><code>val component = imageComponent {\n  +CrossfadePlugin()\n  +PalettePlugin()\n}\n\nCompositionLocalProvider(LocalImageComponent provides component) {\n\n  val imageComponent = LocalImageComponent.current\n\n  GlideImage(\n    component = imageComponent,\n    ..\n  )\n}\n</code></pre> <p>By using <code>LocalImageComponent</code>, you can ensure that the same <code>ImageComponent</code> instance is accessible within the entire composable hierarchy, enabling seamless sharing of the image configuration across various composables. This makes it effortless to maintain consistency and manage image handling efficiently throughout your app.</p>"},{"location":"image-options/","title":"Image Options","text":"<p>You can provide image options to your Landscapist composable functions by passing an <code>ImageOptions</code> instance, as demonstrated in the code below:</p> GlideCoilFresco <pre><code>GlideImage(\n  imageOptions = ImageOptions(\n    contentScale = ContentScale.Crop,\n    alignment = Alignment.Center,\n    contentDescription = \"profile image\",\n    colorFilter = null,\n    alpha = 1f,\n    tag = \"user profile image\"\n  ),\n  ..\n)\n</code></pre> <pre><code>CoilImage(\n  imageOptions = ImageOptions(\n    contentScale = ContentScale.Crop,\n    alignment = Alignment.Center,\n    contentDescription = \"profile image\",\n    colorFilter = null,\n    alpha = 1f,\n    tag = \"user profile image\"\n  ),\n  ..\n)    \n</code></pre> <pre><code>FrescoImage(\n  imageOptions = ImageOptions(\n    contentScale = ContentScale.Crop,\n    alignment = Alignment.Center,\n    contentDescription = \"profile image\",\n    colorFilter = null,\n    alpha = 1f,\n    tag = \"user profile image\"\n  ),\n  ..\n)\n</code></pre>"},{"location":"image-options/#adjust-requesting-size","title":"Adjust Requesting Size","text":"<p>To prevent potential Out of Memory Exceptions when loading large-sized images, you can set the explicit request size of your image using the <code>requestSize</code> property, as shown below:</p> <pre><code>GlideImage(\n  ..,\n  imageOptions = ImageOptions(requestSize = IntSize(800, 600)),\n)\n</code></pre> <p>Landscapist will fetch the image with the explicit size from the network first, ensuring the image is rendered with the appropriate dimensions without consuming excessive memory. If you don't specify a specific <code>requestSize</code> parameter, the image will be automatically adjusted based on its original dimensions.</p>"},{"location":"image-state/","title":"Image States","text":"<p>The image states indicate the current state of the image, which includes loading from the network, rendering success, or encountering failure. Based on these states, you have the flexibility to execute your own functions and implement custom behavior accordingly.</p>"},{"location":"image-state/#listening-image-state-changes","title":"Listening image state changes","text":"<p>You can listen for image state changes by providing the onImageStateChanged parameter to your image composable functions, as illustrated below:</p> GlideCoilFresco <pre><code>GlideImage(\n  onImageStateChanged = {\n    when (it) {\n       GlideImageState.None -&gt; ..\n       GlideImageState.Loading -&gt; ..\n       is GlideImageState.Success -&gt; ..\n       is GlideImageState.Failure -&gt; ..\n    }\n  },\n  ..\n)\n</code></pre> <pre><code>CoilImage(\n  onImageStateChanged = {\n    when (it) {\n       CoilImageState.None -&gt; ..\n       CoilImageState.Loading -&gt; ..\n       is CoilImageState.Success -&gt; ..\n       is CoilImageState.Failure -&gt; ..\n    }\n  },\n  ..\n)\n</code></pre> <pre><code>FrescoImage(\n  onImageStateChanged = {\n    when (it) {\n       FrescoImageState.None -&gt; ..\n       FrescoImageState.Loading -&gt; ..\n       is FrescoImageState.Success -&gt; ..\n       is FrescoImageState.Failure -&gt; ..\n    }\n  },\n  ..\n)\n</code></pre>"},{"location":"image-state/#remember-image-states","title":"Remember Image States","text":"<p>Landscapist offers valuable functions to remember image states within your Composable function and utilize them outside of the <code>onImageStateChanged</code> lambda scope. To achieve this, you can utilize the <code>remember_ImageState()</code> function as demonstrated in the sample below:</p> GlideCoilFresco <pre><code>var glideImageState by rememberGlideImageState()\n\nGlideImage(\n  onImageStateChanged = {\n    glideImageState = it\n  },\n  ..\n)\n</code></pre> <pre><code>var coilImageState by rememberCoilImageState()\n\nCoilImage(\n  onImageStateChanged = {\n    coilImageState = it\n  },\n  ..\n)\n</code></pre> <pre><code>var frescoImageState by rememberFrescoImageState()\n\nFrescoImage(\n  onImageStateChanged = {\n    frescoImageState = it\n  },\n  ..\n)\n</code></pre>"},{"location":"image-state/#datasource","title":"DataSource","text":"<p>You can trace the origin of the image source from the succees image state with the <code>DataSource</code> parameter. The <code>DataSource</code> encompasses the following source origins below:</p> <ul> <li>Memory: Represents an in-memory data source or cache (e.g. bitmap, ByteBuffer).</li> <li>Disk: Represents a disk-based data source (e.g. drawable resource, or File).</li> <li>Network: Represents a network-based data source.</li> <li>Unknown: Represents an unknown data source.</li> </ul>"},{"location":"palette/","title":"Palette","text":"<p>The <code>landscapist-palette</code> package offers a set of valuable image plugins related to the palette, including extracting primary color sets.</p> <p>To utilize these palette supports, simply add the following dependency:</p> <p></p> GroovyKTS <pre><code>dependencies {\n    implementation \"com.github.skydoves:landscapist-palette:$version\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"com.github.skydoves:landscapist-palette:$version\")\n}\n</code></pre> <p>You can extract primary (theme) color profiles with <code>PalettePlugin</code>. You can check out Extract color profiles to see what kinds of colors can be extracted.</p> GlideCoilFresco <pre><code>var palette by rememberPaletteState(null)\n\nGlideImage(\n  component = rememberImageComponent {\n      +PalettePlugin { palette = it }\n  },\n  ..\n)\n\nCrossfade(\n    targetState = palette,\n    modifier = Modifier\n        .padding(horizontal = 8.dp)\n        .size(45.dp)\n) {\n  Box(\n    modifier = Modifier\n      .background(color = Color(it?.lightVibrantSwatch?.rgb ?: 0))\n      .fillMaxSize()\n  )\n}\n</code></pre> <pre><code>var palette by rememberPaletteState(null)\n\nCoilImage(\n  component = rememberImageComponent {\n      +PalettePlugin { palette = it }\n  },\n  ..\n)\n\nCrossfade(\n    targetState = palette,\n    modifier = Modifier\n        .padding(horizontal = 8.dp)\n        .size(45.dp)\n) {\n  Box(\n    modifier = Modifier\n      .background(color = Color(it?.lightVibrantSwatch?.rgb ?: 0))\n      .fillMaxSize()\n  )\n}\n</code></pre> <pre><code>var palette by rememberPaletteState(null)\n\nFrescoImage(\n  component = rememberImageComponent {\n      +PalettePlugin { palette = it }\n  },\n  ..\n)\n\nCrossfade(\n    targetState = palette,\n    modifier = Modifier\n        .padding(horizontal = 8.dp)\n        .size(45.dp)\n) {\n  Box(\n    modifier = Modifier\n      .background(color = Color(it?.lightVibrantSwatch?.rgb ?: 0))\n      .fillMaxSize()\n  )\n}\n</code></pre> <p>You can also customize attributes of <code>PalettePlugin</code> like the example below:</p> GlideCoilFresco <pre><code>var palette by rememberPaletteState(null)\n\nGlideImage(\n  component = rememberImageComponent {\n    +PalettePlugin(\n        imageModel = poster.image,\n        useCache = true, // use cache strategies for the same image model.\n        interceptor = {\n            it.addFilter { rgb, hsl -&gt;\n            // here edit to add the filter colors.\n            false\n            }\n        },\n        paletteLoadedListener = {\n            palette = it\n        }\n    )\n  },\n  ..\n)\n\nCrossfade(\n    targetState = palette,\n    modifier = Modifier\n        .padding(horizontal = 8.dp)\n        .size(45.dp)\n) {\n  Box(\n    modifier = Modifier\n      .background(color = Color(it?.lightVibrantSwatch?.rgb ?: 0))\n      .fillMaxSize()\n  )\n}\n</code></pre> <pre><code>var palette by rememberPaletteState(null)\n\nCoilImage(\n  component = rememberImageComponent {\n    +PalettePlugin(\n        imageModel = poster.image,\n        useCache = true, // use cache strategies for the same image model.\n        interceptor = {\n            it.addFilter { rgb, hsl -&gt;\n            // here edit to add the filter colors.\n            false\n            }\n        },\n        paletteLoadedListener = {\n            palette = it\n        }\n    )\n  },\n  ..\n)\n\nCrossfade(\n    targetState = palette,\n    modifier = Modifier\n        .padding(horizontal = 8.dp)\n        .size(45.dp)\n) {\n  Box(\n    modifier = Modifier\n      .background(color = Color(it?.lightVibrantSwatch?.rgb ?: 0))\n      .fillMaxSize()\n  )\n}\n</code></pre> <pre><code>var palette by rememberPaletteState(null)\n\nFrescoImage(\n  component = rememberImageComponent {\n    +PalettePlugin(\n        imageModel = poster.image,\n        useCache = true, // use cache strategies for the same image model.\n        interceptor = {\n            it.addFilter { rgb, hsl -&gt;\n            // here edit to add the filter colors.\n            false\n            }\n        },\n        paletteLoadedListener = {\n            palette = it\n        }\n    )\n  },\n  ..\n)\n\nCrossfade(\n    targetState = palette,\n    modifier = Modifier\n        .padding(horizontal = 8.dp)\n        .size(45.dp)\n) {\n  Box(\n    modifier = Modifier\n      .background(color = Color(it?.lightVibrantSwatch?.rgb ?: 0))\n      .fillMaxSize()\n  )\n}\n</code></pre>"},{"location":"palette/#preview","title":"Preview","text":""},{"location":"placeholder/","title":"Placeholder","text":"<p>The <code>landscapist-placeholder</code> package offers a rich selection of image plugins for implementing placeholders, including loading and failure placeholder support, as well as shimmering animations.</p> <p>To utilize these placeholder supports, simply add the following dependency:</p> <p></p> GroovyKTS <pre><code>dependencies {\n    implementation \"com.github.skydoves:landscapist-placeholder:$version\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"com.github.skydoves:landscapist-placeholder:$version\")\n}\n</code></pre>"},{"location":"placeholder/#placeholderplugin","title":"PlaceholderPlugin","text":"<p>You have the ability to display your custom placeholders while loading an image or in case of a loading failure by using the <code>PlaceholderPlugin.Loading</code> <code>and PlaceholderPlugin.Failure</code> respectively.</p> GlideCoilFresco <pre><code>GlideImage(\n  component = rememberImageComponent {\n      +PlaceholderPlugin.Loading(painterResource(id = R.drawable.placeholder_loading))\n      +PlaceholderPlugin.Failure(painterResource(id = R.drawable.placeholder_failure))\n  },\n  ..\n)\n</code></pre> <pre><code>CoilImage(\n  component = rememberImageComponent {\n      +PlaceholderPlugin.Loading(painterResource(id = R.drawable.placeholder_loading))\n      +PlaceholderPlugin.Failure(painterResource(id = R.drawable.placeholder_failure))\n  },\n  ..\n)\n</code></pre> <pre><code>FrescoImage(\n  component = rememberImageComponent {\n      +PlaceholderPlugin.Loading(painterResource(id = R.drawable.placeholder_loading))\n      +PlaceholderPlugin.Failure(painterResource(id = R.drawable.placeholder_failure))\n  },\n  ..\n)\n</code></pre> <p>Note</p> <p>The source should be one of <code>ImageBitmap</code>, <code>ImageVector</code>, or <code>Painter</code>.</p>"},{"location":"placeholder/#shimmerplugin","title":"ShimmerPlugin","text":"<p>You can implement a shimmering effect while loading an image by using the <code>ShimmerPlugin</code>, as shown in the example below:</p> GlideCoilFresco <pre><code>GlideImage(\n    component = rememberImageComponent {\n      // displays a shimmering effect when loading an image.\n      +ShimmerPlugin(\n        Shimmer.Flash(\n          baseColor = Color.White,\n          highlightColor = Color.LightGray,\n        )\n      )\n    },\n    ..\n)\n</code></pre> <pre><code>CoilImage(\n    component = rememberImageComponent {\n      // displays a shimmering effect when loading an image.\n      +ShimmerPlugin(\n        Shimmer.Flash(\n          baseColor = Color.White,\n          highlightColor = Color.LightGray,\n        )\n      )\n    },\n    ..\n)\n</code></pre> <pre><code>FrescoImage(\n    component = rememberImageComponent {\n      // displays a shimmering effect when loading an image.\n      +ShimmerPlugin(\n        Shimmer.Flash(\n          baseColor = Color.White,\n          highlightColor = Color.LightGray,\n        )\n      )\n    },\n    ..\n)\n</code></pre> <p>After building the above sample, you'll see the shimmering effect in the result below:</p> <p></p> <p><code>Shimmer</code> sealed class provides following the three different types: <code>Resonate</code>, <code>Fade</code>, and <code>Flash</code>.</p> Resonate Fade Flash"},{"location":"placeholder/#thumbnailplugin","title":"ThumbnailPlugin","text":"<p>Landscapist supports the thumbnail feature, enabling pre-loading and displaying small-sized images while loading the original image. This approach creates the illusion of faster image loading and delivers a natural loading effect to users. To showcase the thumbnail, simply add the image plugin to your image component, as illustrated in the example below:</p> GlideCoilFresco <pre><code>GlideImage(\n    component = rememberImageComponent {\n        +ThumbnailPlugin() \n    },\n    ..\n)\n</code></pre> <pre><code>CoilImage(\n    component = rememberImageComponent {\n        +ThumbnailPlugin() \n    },\n    ..\n)\n</code></pre> <pre><code>FrescoImage(\n    component = rememberImageComponent {\n        +ThumbnailPlugin() \n    },\n    ..\n)\n</code></pre> <p>You can also adjust the request sizes by giving the <code>requestSize</code> parameter:</p> GlideCoilFresco <pre><code>GlideImage(\n    component = rememberImageComponent {\n        +ThumbnailPlugin(IntSize(30 ,30))\n    },\n    ..\n)\n</code></pre> <pre><code>CoilImage(\n    component = rememberImageComponent {\n        +ThumbnailPlugin(IntSize(30 ,30))\n    },\n    ..\n)\n</code></pre> <pre><code>FrescoImage(\n    component = rememberImageComponent {\n        +ThumbnailPlugin(IntSize(30 ,30))\n    },\n    ..\n)\n</code></pre> <p>Note</p> <p>Using a small request size on the thumbnail plugin is highly recommended to expedite the pre-loading images process. By specifying a smaller request size, you ensure that the pre-loaded images load faster, optimizing the user experience during image loading and achieving smoother transitions to display the original images.</p> <p>After building the above sample, you'll see the thumbnail while loading an image in the result below:</p> <p></p>"},{"location":"preview/","title":"Preview on Android Studio","text":"<p>Android Studio's Composable Preview feature is an incredibly powerful tool that allows you to develop and preview a specific part of your Composable without the need to build the entire project.</p> <p>The versatility of Landscapist extends to supporting preview mode for each image library, including Glide, Coil, and Fresco. You can conveniently showcase preview images directly within your editor using the previewPlaceholder parameter, as demonstrated below:</p> GlideCoilFresco <pre><code>GlideImage(\n  previewPlaceholder = painterResource(id = R.drawable.poster),\n  ..\n)\n</code></pre> <pre><code>CoilImage(\n  previewPlaceholder = painterResource(id = R.drawable.poster),\n  ..\n)\n</code></pre> <pre><code>FrescoImage(\n  previewPlaceholder = painterResource(id = R.drawable.poster),\n  ..\n)\n</code></pre> <p>This feature streamlines your development process, providing a visual representation of the image before building the entire project, saving valuable time and effort.</p> <p>Now, you can build your preview composable like so:</p> <pre><code>@Composable\nprivate fun GlideImagePreview() {\n    GlideImage(\n      previewPlaceholder = painterResource(id = R.drawable.poster),\n      ..\n    )\n}\n</code></pre> <p>Once you compile your preview function, you will see the result displayed below in your Android Studio:</p> <p></p>"},{"location":"snapshots-with-paparazzi/","title":"Snapshots With Paparazzi","text":"<p>Paparazzi empowers you to capture snapshot images of your Composable functions without the need to run them on physical devices. With Paparazzi, you can easily take proper snapshot images of your Composables, providing a visual representation of your app's UI.</p> <p>By utilizing Paparazzi, you can efficiently validate your app's UI states, ensuring consistent and visually appealing designs.</p> <pre><code>paparazzi.snapshot {\n  CompositionLocalProvider(LocalInspectionMode provides true) {\n\n    GlideImage(\n      modifier = Modifier.fillMaxSize(),\n      previewPlaceholder = painterResource(id = R.drawable.placeholder),\n      ..\n    )\n  }\n}\n</code></pre>"},{"location":"sponsor/","title":"Sponsor \ud83e\ude77","text":"<p>Landscapist has been skillfully crafted and maintained by skydoves (Jaewoong Eum) since the early days of Compose when it was in its alpha version. As an early adopter of Compose, skydoves recognized the potential of this modern toolkit and set out to develop Landscapist, ensuring seamless and efficient image loading capabilities within Compose-based projects.</p> <p>Jaewoong has created and contributed more than +70 open-source projects and libraries related to Android and Kotlin. With over his open-source projects and libraries, his work has left a significant impact on the development landscape. These projects have been widely embraced by millions of projects, software engineers, and end-users worldwide, with prominent organizations like PayPal, Twitter, Wikipedia, and others benefiting from their creations.</p> <p>If your team or personal projects have benefited from reduced development costs by using this library, you can show your appreciation and support by sponsoring him through the links below:</p> <ul> <li>GitHub Sponsor</li> <li>PayPal</li> </ul> <p>Sponsoring helps sustain the continuous development and improvement of the library, ensuring that it remains a valuable resource for the community. Your contribution not only shows gratitude but also contributes to the growth and success of open-source projects like this one. Feel free to lend your support and make a positive impact on the developer's efforts.</p> <p>If you want to suggest a feature request or sponsorship collaboration, you can reach out to the author with the contacts below:</p> <ul> <li>skydoves2@gmail.com</li> <li>Twitter</li> </ul>"},{"location":"sponsor/#sponsors","title":"Sponsors","text":"<p>These are the sponsors who have supported Landscapist.</p>"},{"location":"sponsor/#rocket-sponsor","title":"\ud83d\ude80 Rocket Sponsor","text":""},{"location":"sponsor/#airplane-sponsor","title":"\u2708\ufe0f Airplane Sponsor","text":""},{"location":"sponsor/#cruise-sponsor","title":"\ud83d\udea2 Cruise Sponsor","text":""},{"location":"sponsor/#train-sponsor","title":"\ud83d\ude82 Train Sponsor","text":"<p>I truly appreciate all of our sponsors, no matter their tier, company, or any other factor!</p> <p></p>"},{"location":"transformation/","title":"Transformation","text":"<p>The <code>landscapist-transformation</code> package offers a range of valuable image transformation plugins, including the blur effect.</p> <p>To utilize these transformation supports, simply add the following dependency:</p> <p></p> GroovyKTS <pre><code>dependencies {\n    implementation \"com.github.skydoves:landscapist-transformation:$version\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"com.github.skydoves:landscapist-transformation:$version\")\n}\n</code></pre>"},{"location":"transformation/#blurtransformationplugin","title":"BlurTransformationPlugin","text":"<p>You can effortlessly implement the blur effect using the <code>BlurTransformationPlugin</code>, as demonstrated below:</p> GlideCoilFresco <pre><code>GlideImage(\n  component = rememberImageComponent {\n    +BlurTransformationPlugin(radius = 10) // between 0 to Int.MAX_VALUE.\n },\n  ..\n)\n</code></pre> <pre><code>CoilImage(\n  component = rememberImageComponent {\n    +BlurTransformationPlugin(radius = 10) // between 0 to Int.MAX_VALUE.\n },\n  ..\n)\n</code></pre> <pre><code>FrescoImage(\n  component = rememberImageComponent {\n    +BlurTransformationPlugin(radius = 10) // between 0 to Int.MAX_VALUE.\n },\n  ..\n)\n</code></pre> <p>By incorporating the <code>BlurTransformationPlugin</code>, you can easily add a captivating blur effect to your images, enhancing their visual appeal and creating a more dynamic and immersive user experience within your app. Adjust the <code>blurRadius</code> parameter to achieve the desired level of blurriness for your images.</p> <p>Note</p> <p>Landscapist's blur transformation falls back onto a CPU-based implementation to support older API levels. So you don't need to worry about API compatibilities and performance issues.</p>"},{"location":"transformation/#preview","title":"Preview","text":""},{"location":"version-map/","title":"Version Map","text":"<p>The Landscapist utilizes varying Compose versions and JVM targets for each release. This map will assist you in ensuring compatibility and smooth integration with your project.</p> Landscapist Compose UI Jvm Target Glide Coil Fresco 2.6.1 1.9.1 (BOM 2025.09.00) 17 5.0.5 2.7.0 or 3.3.0 3.6.0 2.6.0 1.9.1 (BOM 2025.09.00) 17 5.0.5 2.7.0 or 3.3.0 3.6.0 2.5.2 1.8.3 (BOM 2025.07.00) 17 4.16.0 2.7.0 or 3.3.0 3.6.0 2.5.1 1.8.2 (BOM 2025.06.00) 11 4.16.0 2.7.0 or 3.2.0 3.6.0 2.5.0 1.8.2 (BOM 2025.06.00) 11 4.16.0 2.7.0 or 3.2.0 3.6.0 2.4.9 1.8.0 (BOM 2025.05.00) 11 4.16.0 2.7.0 or 3.2.0 3.6.0 2.4.8 1.8.0 (BOM 2025.05.00) 11 4.16.0 2.7.0 or 3.2.0 3.6.0 2.4.7 1.7.7 (BOM 2025.02.01) 11 4.16.0 2.7.0 or 3.1.0 3.6.0 2.4.6 1.7.6 (BOM 2024.12.01) 11 4.16.0 3.0.4 3.5.0 2.4.5 1.7.6 (BOM 2024.12.01) 11 4.16.0 3.0.4 3.5.0 2.4.4 1.7.5 (BOM 2024.11.00) 11 4.16.0 3.0.4 3.5.0 2.4.3 1.7.5 (BOM 2024.11.00) 11 4.16.0 3.0.3 3.3.0 2.4.2 1.7.5 (BOM 2024.10.01) 11 4.16.0 3.0.0 3.3.0 2.4.1 1.7.3 (BOM 2024.09.03) 11 4.16.0 2.7.0 3.3.0 2.4.0 1.7.3 (BOM 2024.09.03) 11 4.16.0 2.7.0 3.3.0 2.3.2 1.6.2 (BOM 2024.02.01) 11 4.16.0 2.5.0 3.1.3 2.3.1 1.6.1 (BOM 2024.02.00) 11 4.16.0 2.5.0 3.1.3 2.3.0 1.6.0 (BOM 2024.01.00) 11 4.16.0 2.5.0 3.1.3 2.2.13 1.5.4 (BOM 2023.10.01) 11 4.16.0 2.5.0 3.1.3 2.2.12 1.5.4 (BOM 2023.10.01) 11 4.16.0 2.5.0 3.1.3 2.2.11 1.5.4 (BOM 2023.10.01) 11 4.16.0 2.5.0 3.1.3 2.2.10 1.5.2 (BOM 2023.09.02) 11 4.16.0 2.4.0 3.1.0 2.2.9 1.5.1 (BOM 2023.09.00) 11 4.16.0 2.4.0 3.1.0 2.2.8 1.5.0 (BOM 2023.08.00) 11 4.16.0 2.4.0 2.6.0 2.2.7 1.5.0 (BOM 2023.08.00) 11 4.15.1 2.3.0 2.6.0 2.2.6 1.4.3 (BOM 2023.06.00) 11 4.15.1 2.3.0 2.6.0 2.2.5 1.4.3 (BOM 2023.06.00) 17 4.15.1 2.3.0 2.6.0 2.2.4 1.4.3 (BOM 2023.06.00) 17 4.15.1 2.3.0 2.6.0 2.2.3 1.4.3 (BOM 2023.06.00) 17 4.15.1 2.3.0 2.6.0 2.2.2 1.4.3 (BOM 2023.06.00) 17 4.15.1 2.3.0 2.6.0 2.2.1 1.4.3 (BOM 2023.05.01) 17 4.15.1 2.3.0 2.6.0 2.2.0 1.4.3 (BOM 2023.05.01) 17 4.15.1 2.3.0 2.6.0 2.1.13 1.4.1 (BOM 2023.04.00) 17 4.15.1 2.3.0 2.6.0 2.1.12 1.4.1 (BOM 2023.04.00) 17 4.15.1 2.3.0 2.6.0 2.1.11 1.4.1 (BOM 2023.04.00) 17 4.15.1 2.3.0 2.6.0 2.1.10 1.4.1 (BOM 2023.04.00) 17 4.15.1 2.3.0 2.6.0 2.1.9 1.4.0 (BOM 2023.03.00) 11 4.15.1 2.3.0 2.6.0 2.1.8 1.3.3 (BOM 2023.01.00) 11 4.15.1 2.2.2 2.6.0"},{"location":"coil/imageloader/","title":"Custom ImageLoader","text":"<p>Landscapist provides multiple ways to customize the ImageRequest and ImageLoader.</p>"},{"location":"coil/imageloader/#custom-imagerequest-and-imageloader","title":"Custom ImageRequest and ImageLoader","text":"<p>You can load images with your own ImageRequest and ImageLoader, which provides all the necessary information for loading images like caching strategies and transformations.</p> <pre><code>CoilImage(\n  imageRequest = {\n      ImageRequest.Builder(LocalContext.current)\n        .data(poster.poster)\n        .crossfade(true)\n        .build() },\n  imageLoader = {\n      ImageLoader.Builder(LocalContext.current)\n        .availableMemoryPercentage(0.25)\n        .crossfade(true)\n        .build() },\n  modifier = modifier,\n)\n</code></pre>"},{"location":"coil/imageloader/#localcoilimageloader","title":"LocalCoilImageLoader","text":"<p>You can pass the same instance of your <code>ImageLoader</code> down through the Composition in your composable hierarchy as following the example below:</p> <pre><code> val imageLoader = ImageLoader.Builder(context).build()\nCompositionLocalProvider(LocalCoilImageLoader provides imageLoader) {\n\n   // This will automatically use the value of current imageLoader in the hierarchy.\n   CoilImage(\n     imageModel = ...\n   )\n }\n</code></pre>"},{"location":"coil/imageloader/#animated-image-supports-gif-webp","title":"Animated Image Supports (GIF, Webp)","text":"<p>You can load animated GIFs and WebP Images with your <code>ImageLoader</code>.</p> <p></p> <pre><code>val context = LocalContext.current\nval imageLoader = ImageLoader.Builder(context)\n  .components {\n    if (SDK_INT &gt;= 28) {\n      add(ImageDecoderDecoder.Factory())\n    } else {\n      add(GifDecoder.Factory())\n    }\n  }\n  .build()\n\nCoilImage(\n    imageModel = { poster.gif }, // URL of an animated image.\n    imageLoader = { imageLoader },\n    shimmerParams = ShimmerParams(\n      baseColor = background800,\n      highlightColor = shimmerHighLight\n    ),\n    modifier = Modifier\n      .fillMaxWidth()\n      .padding(8.dp)\n      .height(500.dp)\n      .clip(RoundedCornerShape(8.dp))\n  )\n</code></pre>"},{"location":"coil/overview/","title":"Overview","text":"Landscapist Coil <p> Add the dependency below to your module's <code>build.gradle</code> file:</p> GroovyKTS <pre><code>dependencies {\n    implementation \"com.github.skydoves:landscapist-coil:$version\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"com.github.skydoves:landscapist-coil:$version\")\n}\n</code></pre> <p>Note</p> <p>Please make sure your project uses the same Jetpack Compose version on the release page.</p>"},{"location":"coil/overview/#coilimage","title":"CoilImage","text":"<p>You can load images by using the <code>CoilImage</code> composable function as the following example below:</p> <pre><code>CoilImage(\n  imageModel = { imageUrl }, // loading a network image or local resource using an URL.\n  imageOptions = ImageOptions(\n    contentScale = ContentScale.Crop,\n    alignment = Alignment.Center\n  )\n)\n</code></pre>"},{"location":"coil/overview/#compose-metrics","title":"Compose Metrics","text":"<p>According to the Compose Compiler Metrics, the <code>CoilImage</code> Composable function is marked as Restartable and Skippable. This means you don't have to worry about performance issues related to re-rendering or re-fetching problems that can occur during recomposition. The Composable function's restartable and skippable nature ensures that the necessary actions are taken to optimize rendering, making it more efficient and seamless.</p> <p></p>"},{"location":"fresco/animated-image/","title":"Fresco Animated Image Support (GIF, Webp)","text":"<p>Add the below dependency to your module's <code>build.gradle</code> file:</p> GroovyKTS <pre><code>dependencies {\n    implementation \"com.github.skydoves:landscapist-fresco-websupport:$version\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"com.github.skydoves:landscapist-fresco-websupport:$version\")\n}\n</code></pre> <p></p> <p>You can load animated GIFs and WebP Images with <code>FrescoWebImage</code> composable function. You should pass the <code>AbstractDraweeController</code> like the following example below:</p> <pre><code>FrescoWebImage(\n  controllerBuilder = {\n      Fresco.newDraweeControllerBuilder()\n          .setUri(poster.gif) // GIF or Webp image url.\n          .setAutoPlayAnimations(true)\n  },\n  modifier = Modifier\n    .fillMaxWidth()\n    .height(300.dp)\n)\n</code></pre> <p>For more details, check out DraweeController, and Supported URIs for setting URI addresses. Also, you can load general images (jpeg, png, etc) which can be loaded with <code>FrescoImage</code> by using <code>FrescoWebImage</code> and your custom controller.</p>"},{"location":"fresco/overview/","title":"Overview","text":"Fresco <p>Add the dependency below to your module's <code>build.gradle</code> file:</p> GroovyKTS <pre><code>dependencies {\n    implementation \"com.github.skydoves:landscapist-fresco:$version\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"com.github.skydoves:landscapist-fresco:$version\")\n}\n</code></pre> <p>Note</p> <p><code>Landscapist-Fresco</code> includes version <code>2.6.0</code> of Fresco. So please make sure your project is using the same Fresco version or exclude the Fresco dependency to adapt yours. Also, please make sure the Jetpack Compose version on the release page.</p>"},{"location":"fresco/overview/#setup","title":"Setup","text":"<p>To get started, you should set up <code>Fresco</code> with ImagePipelineConfig in your <code>Application</code> class. Generally, it's recommended initializing with <code>OkHttpImagePipelineConfigFactory</code>. Also, you can customize caching, networking, and thread pool strategies with your own <code>ImagePipelineConfig</code>. For more details, you can check out Using Other Network Layers.</p> <pre><code>class App : Application() {\n\n  override fun onCreate() {\n    super.onCreate()\n\n    val pipelineConfig =\n      OkHttpImagePipelineConfigFactory\n        .newBuilder(this, OkHttpClient.Builder().build())\n        .setDiskCacheEnabled(true)\n        .setDownsampleEnabled(true)\n        .setResizeAndRotateEnabledForNetwork(true)\n        .build()\n\n    Fresco.initialize(this, pipelineConfig)\n  }\n}\n</code></pre>"},{"location":"fresco/overview/#frescoimage","title":"FrescoImage","text":"<p>You can load images by using the <code>FrescoImage</code> composable function as the following example below:</p> <pre><code>FrescoImage(\n  imageUrl = stringImageUrl, // loading a network image using an URL.\n  imageOptions = ImageOptions(\n    contentScale = ContentScale.Crop,\n    alignment = Alignment.Center\n  )\n)\n</code></pre>"},{"location":"fresco/overview/#compose-metrics","title":"Compose Metrics","text":"<p>According to the Compose Compiler Metrics, the <code>FrescoImage</code> Composable function is marked as Restartable and Skippable. This means you don't have to worry about performance issues related to re-rendering or re-fetching problems that can occur during recomposition. The Composable function's restartable and skippable nature ensures that the necessary actions are taken to optimize rendering, making it more efficient and seamless.</p> <p></p>"},{"location":"fresco/request/","title":"Custom ImageRequest","text":"<p>Landscapist provides multiple ways to customize the requests.</p>"},{"location":"fresco/request/#custom-imagerequest","title":"Custom ImageRequest","text":"<p>You can load images with your own ImageRequest, which provides some necessary information for loading images like decoding strategies and resizing.</p> <pre><code>val imageRequest = ImageRequestBuilder\n  .newBuilderWithSource(uri)\n  .setImageDecodeOptions(decodeOptions)\n  .setLocalThumbnailPreviewsEnabled(true)\n  .setLowestPermittedRequestLevel(RequestLevel.FULL_FETCH)\n  .setProgressiveRenderingEnabled(false)\n  .setResizeOptions(ResizeOptions(width, height))\n  .build()\n\nFrescoImage(\n  imageUrl = stringImageUrl,\n  imageRequest = { imageRequest }\n)\n</code></pre>"},{"location":"fresco/request/#localfrescoimagerequest","title":"LocalFrescoImageRequest","text":"<p>You can pass the same instance of your <code>imageRequestBuilder</code> down through the Composition in your composable hierarchy as following the example below:</p> <pre><code>// customize the ImageRequest as needed\nval imageRequestBuilder = ImageRequestBuilder\n  .newBuilderWithSource(uri)\n  .setImageDecodeOptions(decodeOptions)\n  .setLocalThumbnailPreviewsEnabled(true)\n  .setLowestPermittedRequestLevel(RequestLevel.FULL_FETCH)\n  .setProgressiveRenderingEnabled(false)\n  .setResizeOptions(ResizeOptions(width, height))\n\nCompositionLocalProvider(LocalFrescoImageRequest provides imageRequestBuilder) {\n  // This will automatically use the value of current ImageRequest in the hierarchy.\n  FrescoImage(\n    imageUrl = ...\n  )\n}\n</code></pre>"},{"location":"glide/options/","title":"Custom Options","text":"<p>Landscapist provides multiple ways to customize the request and transition options.</p>"},{"location":"glide/options/#custom-requestoptions-and-transitionoptions","title":"Custom RequestOptions and TransitionOptions","text":"<p>You can customize your request-options with your own RequestOptions and TransitionOptions for applying caching strategies, loading transformations like below:</p> <pre><code>GlideImage(\n  imageModel = { imageUrl },\n  requestOptions = {\n    RequestOptions()\n        .override(256, 256)\n        .diskCacheStrategy(DiskCacheStrategy.ALL)\n        .centerCrop()\n  }\n)\n</code></pre>"},{"location":"glide/options/#custom-requestbuilder","title":"Custom RequestBuilder","text":"<p>You can request image with your own RequestBuilder, which is the backbone of the request in Glide and is responsible for bringing your options together with your requested url or model to start a new load.</p> <pre><code>GlideImage(\n  imageModel = { imageUrl },\n  requestBuilder = { Glide.with(LocalContext.current.applicationContext).asDrawable() },\n  modifier = Modifier.constrainAs(image) {\n    centerHorizontallyTo(parent)\n    top.linkTo(parent.top)\n  }.aspectRatio(0.8f)\n)\n</code></pre>"},{"location":"glide/options/#custom-requestlistener","title":"Custom RequestListener","text":"<p>You can register your own RequestListener, which allows you to trace the status of a request while images load.</p> <pre><code>GlideImage(\n  imageModel = { imageUrl },\n  requestListener = object: RequestListener&lt;Drawable&gt; {\n    override fun onLoadFailed(\n      e: GlideException?,\n      model: Any?,\n      target: Target&lt;Drawable&gt;?,\n      isFirstResource: Boolean\n    ): Boolean {\n      // do something\n      return false\n    }\n\n    override fun onResourceReady(\n      resource: Drawable?,\n      model: Any?,\n      target: Target&lt;Drawable&gt;?,\n      dataSource: DataSource?,\n      isFirstResource: Boolean\n    ): Boolean {\n      // do something\n      return true\n    }\n  }\n)\n</code></pre>"},{"location":"glide/options/#localgliderequestoptions","title":"LocalGlideRequestOptions","text":"<p>You can pass the same instance of your <code>RequestOptions</code> down through the Composition in your composable hierarchy as following the example below:</p> <pre><code>val requestOptions = RequestOptions()\n    .override(300, 300)\n    .circleCrop()\n\nCompositionLocalProvider(LocalGlideRequestOptions provides requestOptions) {\n  // Loads images with the custom `requestOptions` without explicit defines.\n  GlideImage(\n    imageModel = ...\n  )\n}\n</code></pre>"},{"location":"glide/overview/","title":"Overview","text":"Landscapist Glide"},{"location":"glide/overview/#download","title":"Download","text":"<p>Add the codes below to your root <code>build.gradle</code> file (not your module-level build.gradle file):</p> <pre><code>allprojects {\n    repositories {\n        mavenCentral()\n    }\n}\n</code></pre> <p>Next, add the dependency below to your module's <code>build.gradle</code> file:</p> GroovyKTS <pre><code>dependencies {\n    implementation \"com.github.skydoves:landscapist-glide:2.6.1\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"com.github.skydoves:landscapist-glide:2.6.1\")\n}\n</code></pre> <p>Note</p> <p><code>Landscapist-Glide</code> includes version <code>4.15.1</code> of Glide internally. So please make sure your project uses the same Glide version or exclude the Glide dependency to adapt yours. Also, please make sure the Jetpack Compose version on the release page.</p>"},{"location":"glide/overview/#glideimage","title":"GlideImage","text":"<p>You can load images simply by using <code>GlideImage</code> composable function as the following example below:</p> <pre><code>GlideImage(\n  imageModel = { imageUrl }, // loading a network image using an URL.\n  imageOptions = ImageOptions(\n    contentScale = ContentScale.Crop,\n    alignment = Alignment.Center\n  )\n)\n</code></pre>"},{"location":"glide/overview/#compose-metrics","title":"Compose Metrics","text":"<p>According to the Compose Compiler Metrics, the <code>GlideImage</code> Composable function is marked as Restartable and Skippable. This means you don't have to worry about performance issues related to re-rendering or re-fetching problems that can occur during recomposition. The Composable function's restartable and skippable nature ensures that the necessary actions are taken to optimize rendering, making it more efficient and seamless.</p> <p></p>"}]}